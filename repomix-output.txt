This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-16T03:28:45.157Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
app/config.py
app/gemini.py
app/google_sheets.py
app/gui.py
app/main.py
LICENSE
README.md
requirements.txt

================================================================
Repository Files
================================================================

================
File: .gitignore
================
.env
key.env
test.jpg
test.py
tempCodeRunnerFile.py
data.json
test
__pycache__
.repomixignore
repomix.config.json

================
File: app/config.py
================
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv('key.env')

SHEET_ID = os.getenv('SHEET_ID')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

================
File: app/gemini.py
================
import google.generativeai as genai
from google.ai.generativelanguage_v1beta.types import content

def configure_gemini(api_key, mode="chat"):
    genai.configure(api_key=api_key)

    if mode == "chat":
        generation_config = {
            "temperature": 1,
            "top_p": 0.95,
            "top_k": 40,
            "max_output_tokens": 8192,
            "response_schema": content.Schema(
                type=content.Type.OBJECT,
                required=["note", "category", "amount"],
                properties={
                    "note": content.Schema(type=content.Type.STRING),
                    "category": content.Schema(type=content.Type.STRING),
                    "amount": content.Schema(type=content.Type.NUMBER),
                },
            ),
            "response_mime_type": "application/json",
        }
    elif mode == "analysis":
        generation_config = {
            "temperature": 0.3,        # Gi·∫£m s√°ng t·∫°o, tƒÉng t√≠nh logic
            "top_p": 0.85,
            "top_k": 50,
            "max_output_tokens": 8192,
            "response_mime_type": "text/plain",  # Tr·∫£ v·ªÅ vƒÉn b·∫£n th∆∞·ªùng
        }

    model = genai.GenerativeModel(
        model_name="gemini-1.5-flash",
        generation_config=generation_config,
    )

    return model

================
File: app/google_sheets.py
================
import requests
import csv
from io import StringIO
from tkinter import messagebox

def send_to_google_sheets(data, sheet_id):
    url = 'https://script.google.com/macros/s/AKfycbwrnLikw6-OvK4mj7VCPqukDuiPK3ucZPQNtYYDkm2XoaSeo0g9FLhJaco3Ajuy_qn2Gg/exec'
    data['SHEET_ID'] = sheet_id
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            messagebox.showinfo("Success", "D·ªØ li·ªáu ƒë√£ g·ª≠i th√†nh c√¥ng!")
        else:
            messagebox.showerror("Error", f"L·ªói g·ª≠i d·ªØ li·ªáu: {response.text}")
    except requests.RequestException as e:
        messagebox.showerror("K·∫øt n·ªëi l·ªói", str(e))

def get_sheet_data(sheet_id, gid=0):
    url = f'https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}'
    try:
        response = requests.get(url)
        if response.status_code == 200:
            f = StringIO(response.text)
            reader = csv.DictReader(f)
            data = list(reader)
            return data
        else:
            messagebox.showerror("L·ªói", f"L·ªói l·∫•y d·ªØ li·ªáu: {response.status_code}")
            return None
    except requests.RequestException as e:
        messagebox.showerror("K·∫øt n·ªëi l·ªói", str(e))
        return None

================
File: app/gui.py
================
import customtkinter as ctk
from tkinter import filedialog

def setup_gui(process_message, upload_image, analyze_data):
    ctk.set_appearance_mode("Light")  # Light / Dark / System
    ctk.set_default_color_theme("blue")  # green, dark-blue, blue

    root = ctk.CTk()
    root.title("üí∏ Expense Tracker with Gemini AI")
    root.geometry("900x700")  # üìè M·ªü r·ªông chi·ªÅu ngang

    # Header
    header = ctk.CTkLabel(root, text="Expense Tracker üí∞", font=("Helvetica", 26, "bold"))
    header.pack(pady=20)

    # Khu v·ª±c hi·ªÉn th·ªã chat (M·ªü r·ªông ngang)
    display_area = ctk.CTkTextbox(root, width=850, height=450, font=("Helvetica", 12))
    display_area.pack(pady=10)
    display_area.configure(state='disabled')

    # Khung nh·∫≠p li·ªáu
    entry_frame = ctk.CTkFrame(root)
    entry_frame.pack(pady=10)

    entry = ctk.CTkEntry(entry_frame, width=600, font=("Helvetica", 12))
    entry.pack(side="left", padx=10, pady=10)

    send_button = ctk.CTkButton(entry_frame, text="üì® G·ª≠i", width=80, command=process_message)
    send_button.pack(side="left", padx=5)

    upload_button = ctk.CTkButton(root, text="üì∑ T·∫£i ·∫¢nh", width=150, command=upload_image)
    upload_button.pack(pady=5)

    analyze_button = ctk.CTkButton(root, text="üìä Ph√¢n T√≠ch D·ªØ Li·ªáu", width=150, command=analyze_data)
    analyze_button.pack(pady=5)

    spinner_label = ctk.CTkLabel(root, text="", font=("Helvetica", 10))
    spinner_label.pack(pady=5)

    # Nh·∫•n Enter ƒë·ªÉ g·ª≠i
    def enter_pressed(event):
        process_message()

    entry.bind("<Return>", enter_pressed)

    return root, display_area, entry, spinner_label

================
File: app/main.py
================
import json
import threading
from config import SHEET_ID, GEMINI_API_KEY
from gemini import configure_gemini
from google_sheets import get_sheet_data, send_to_google_sheets
from gui import setup_gui

# C·∫•u h√¨nh Gemini m·∫∑c ƒë·ªãnh
model = configure_gemini(GEMINI_API_KEY, mode="chat")
chat_session = model.start_chat(history=[])

def show_spinner(message="üîÑ ƒêang x·ª≠ l√Ω..."):
    spinner_label.configure(text=message)
    spinner_label.update()

def hide_spinner():
    spinner_label.configure(text="")
    spinner_label.update()

def send_bot_message(message):
    display_area.configure(state='normal')
    display_area.insert("end", f"ü§ñ Bot: {message}\n\n")
    display_area.configure(state='disabled')

def process_message():
    user_msg = entry.get().strip()
    if not user_msg:
        send_bot_message("‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p n·ªôi dung.")
        return

    display_area.configure(state='normal')
    display_area.insert("end", f"üßë‚Äçüíª B·∫°n: {user_msg}\n\n")
    display_area.configure(state='disabled')
    entry.delete(0, "end")

    threading.Thread(target=bot_response, args=(user_msg,)).start()

def bot_response(user_msg):
    show_spinner("ü§ñ ƒêang tr·∫£ l·ªùi...")
    response = chat_session.send_message(user_msg)
    try:
        data = json.loads(response.text.strip("`"))
        hide_spinner()
        send_bot_message(f"{data}")
        send_to_google_sheets(data, SHEET_ID)
        send_bot_message("‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o Google Sheets.")
    except json.JSONDecodeError:
        hide_spinner()
        send_bot_message("‚ùå Bot kh√¥ng hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i.")

def analyze_data():
    show_spinner("üìä ƒêang ph√¢n t√≠ch d·ªØ li·ªáu...")
    threading.Thread(target=analyze_data_thread).start()

def analyze_data_thread():
    data = get_sheet_data(SHEET_ID)
    if data:
        response = chat_session.send_message(f"Ph√¢n t√≠ch d·ªØ li·ªáu sau:\n{json.dumps(data)}")
        hide_spinner()
        send_bot_message(f"üìä K·∫øt qu·∫£ ph√¢n t√≠ch:\n{response.text}")
    else:
        hide_spinner()
        send_bot_message("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu t·ª´ Google Sheets.")

# Kh·ªüi ƒë·ªông giao di·ªán
root, display_area, entry, spinner_label = setup_gui(process_message, None, analyze_data)
root.mainloop()

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Ng√¥ T·∫•n T√†i

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: README.md
================
```markdown
---

# üìä Expense Tracker with Gemini

### ·ª®ng d·ª•ng ghi ch√©p v√† ph√¢n t√≠ch chi ti√™u c√° nh√¢n th√¥ng minh t√≠ch h·ª£p **Gemini AI** v√† **Google Sheets**.

---

## üåü T√≠nh NƒÉng

‚úÖ **Ghi ch√©p chi ti√™u nhanh ch√≥ng** b·∫±ng vƒÉn b·∫£n ho·∫∑c h√¨nh ·∫£nh.  
‚úÖ **Ph√¢n lo·∫°i t·ª± ƒë·ªông** c√°c kho·∫£n chi ti√™u (ƒÉn u·ªëng, xƒÉng xe, mua s·∫Øm, v.v.).  
‚úÖ **L∆∞u tr·ªØ d·ªØ li·ªáu an to√†n** tr√™n **Google Sheets**.  
‚úÖ **Ph√¢n t√≠ch d·ªØ li·ªáu chi ti√™u chuy√™n s√¢u** v·ªõi **Gemini AI**.  
‚úÖ **Giao di·ªán tr·ª±c quan** v·ªõi **Tkinter**, h·ªó tr·ª£ **nh·∫•n Enter ƒë·ªÉ g·ª≠i** v√† **hi·ªÉn th·ªã loading** khi x·ª≠ l√Ω.  

---

## üõ† C√¥ng Ngh·ªá S·ª≠ D·ª•ng

- **Python 3.x** üêç  
- **Tkinter** ‚Äì T·∫°o giao di·ªán ng∆∞·ªùi d√πng.  
- **Google Generative AI (Gemini API)** ‚Äì X·ª≠ l√Ω v√† ph√¢n t√≠ch d·ªØ li·ªáu.  
- **Google Sheets API** ‚Äì L∆∞u tr·ªØ v√† truy xu·∫•t d·ªØ li·ªáu.  
- **Requests** ‚Äì Giao ti·∫øp v·ªõi API.  
- **Python-dotenv** ‚Äì Qu·∫£n l√Ω bi·∫øn m√¥i tr∆∞·ªùng.  

---

## üöÄ H∆∞·ªõng D·∫´n C√†i ƒê·∫∑t

### 1Ô∏è‚É£ Clone Project

```bash
git clone https://github.com/newnol/gemini-to-sheet.git
cd gemini-to-sheet
```

### 2Ô∏è‚É£ T·∫°o M√¥i Tr∆∞·ªùng ·∫¢o

```bash
python -m venv venv
source venv/bin/activate  # Mac/Linux
venv\Scripts\activate     # Windows
```

### 3Ô∏è‚É£ C√†i ƒê·∫∑t Th∆∞ Vi·ªán

```bash
pip install -r requirements.txt
```

### 4Ô∏è‚É£ Thi·∫øt L·∫≠p Bi·∫øn M√¥i Tr∆∞·ªùng

T·∫°o file `.env`:

```env
GEMINI_API_KEY=your_gemini_api_key
SHEET_ID=your_google_sheet_id
```

### 5Ô∏è‚É£ Ch·∫°y ·ª®ng D·ª•ng

```bash
python app/main.py
```

---

## üéÆ C√°ch S·ª≠ D·ª•ng

1. **Nh·∫≠p n·ªôi dung chi ti√™u** v√†o √¥ vƒÉn b·∫£n.  
   _V√≠ d·ª•:_ `Nay ƒÉn s√°ng 25k`  
2. **Nh·∫•n "üì® G·ª≠i"** ho·∫∑c **nh·∫•n Enter** ƒë·ªÉ g·ª≠i.  
3. **Nh·∫•n "üì∑ T·∫£i ·∫¢nh"** ƒë·ªÉ t·∫£i ·∫£nh h√≥a ƒë∆°n ho·∫∑c ·∫£nh li√™n quan.  
4. **Nh·∫•n "üìä Ph√¢n T√≠ch D·ªØ Li·ªáu"** ƒë·ªÉ Gemini ph√¢n t√≠ch to√†n b·ªô chi ti√™u.  
5. D·ªØ li·ªáu s·∫Ω **ph√¢n lo·∫°i v√† l∆∞u v√†o Google Sheets**.

---

## üìÇ C·∫•u Tr√∫c D·ª± √Ån

```
expense_tracker/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ config.py            # Qu·∫£n l√Ω bi·∫øn m√¥i tr∆∞·ªùng
‚îÇ   ‚îú‚îÄ‚îÄ gemini.py            # T√≠ch h·ª£p API Gemini (ph√¢n t√≠ch & ghi ch√©p)
‚îÇ   ‚îú‚îÄ‚îÄ google_sheets.py     # G·ª≠i & l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets
‚îÇ   ‚îú‚îÄ‚îÄ gui.py               # Giao di·ªán Tkinter
‚îÇ   ‚îî‚îÄ‚îÄ main.py              # ƒêi·ªÉm kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
‚îÇ
‚îú‚îÄ‚îÄ tests/                   # Th∆∞ m·ª•c ki·ªÉm th·ª≠
‚îÇ   ‚îú‚îÄ‚îÄ test_gemini.py
‚îÇ   ‚îî‚îÄ‚îÄ test_google_sheets.py
‚îÇ
‚îú‚îÄ‚îÄ .env                     # Bi·∫øn m√¥i tr∆∞·ªùng (KH√îNG commit)
‚îú‚îÄ‚îÄ .gitignore               # File/th∆∞ m·ª•c kh√¥ng ƒë·∫©y l√™n Git
‚îú‚îÄ‚îÄ README.md                # File m√¥ t·∫£ d·ª± √°n
‚îî‚îÄ‚îÄ requirements.txt         # Danh s√°ch th∆∞ vi·ªán c·∫ßn c√†i
```

---

## üìä V√≠ D·ª• Ph√¢n T√≠ch D·ªØ Li·ªáu

**Nh·∫≠p:**  
```
Nay ƒÉn s√°ng 25k
```

**Bot tr·∫£ l·ªùi:**  
```json
{
  "note": "ƒÉn s√°ng",
  "category": "breakfast",
  "amount": 25000
}
```

**Ph√¢n t√≠ch d·ªØ li·ªáu:**  
```
üìä T·ªïng chi ti√™u th√°ng n√†y t·∫≠p trung v√†o ƒÉn u·ªëng (60%), di chuy·ªÉn (25%), v√† mua s·∫Øm (15%).
üëâ ƒê·ªÅ xu·∫•t: Gi·∫£m chi ti√™u ƒÉn u·ªëng ƒë·ªÉ ti·∫øt ki·ªám h∆°n.
```

---

## ‚ùì C√¢u H·ªèi Th∆∞·ªùng G·∫∑p

### 1. **L√†m sao ƒë·ªÉ l·∫•y API Key c·ªßa Gemini?**  
- ƒêƒÉng k√Ω t·∫°i [Google Cloud Console](https://console.cloud.google.com/).  
- T·∫°o API Key v√† d√°n v√†o file `.env`.

### 2. **D·ªØ li·ªáu l∆∞u ·ªü ƒë√¢u?**  
- D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ª±c ti·∫øp l√™n **Google Sheets** theo `SHEET_ID`.

### 3. **Ph√¢n t√≠ch d·ªØ li·ªáu nh∆∞ th·∫ø n√†o?**  
- Nh·∫•n **üìä Ph√¢n T√≠ch D·ªØ Li·ªáu** ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ Google Sheets v√† g·ª≠i cho Gemini AI ph√¢n t√≠ch.

### 4. **·ª®ng d·ª•ng c√≥ h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ kh√¥ng?**  
- Hi·ªán t·∫°i ·ª©ng d·ª•ng h·ªó tr·ª£ **Ti·∫øng Vi·ªát**. S·∫Ω m·ªü r·ªông th√™m c√°c ng√¥n ng·ªØ kh√°c trong t∆∞∆°ng lai.

---

## üìà K·∫ø Ho·∫°ch Ph√°t Tri·ªÉn

- [x] **Ph√¢n lo·∫°i chi ti√™u t·ª± ƒë·ªông**.  
- [x] **Ph√¢n t√≠ch d·ªØ li·ªáu chi ti√™u v·ªõi Gemini AI**.  
- [ ] **B√°o c√°o th·ªëng k√™ chi ti√™u theo tu·∫ßn/th√°ng**.  
- [ ] **Phi√™n b·∫£n di ƒë·ªông (Android/iOS)**.  

---

## ü§ù ƒê√≥ng G√≥p

1. Fork repository.  
2. T·∫°o nh√°nh m·ªõi: `git checkout -b feature-name`.  
3. Commit thay ƒë·ªïi: `git commit -m "Add feature"`.  
4. Push nh√°nh: `git push origin feature-name`.  
5. T·∫°o **Pull Request**.

---

## üíº T√°c Gi·∫£

- **üë§ T√™n:** [Your Name]  
- **üåê Website:** [newnol.io.com](https://newnol.io.vn)  
- **üìß Email:** tantai@newnol.io.vn  

---

## üìú Gi·∫•y Ph√©p

D·ª± √°n ƒë∆∞·ª£c c·∫•p ph√©p theo [MIT License](LICENSE).

---

## ‚≠êÔ∏è N·∫øu Th·∫•y Hay, H√£y ·ª¶ng H·ªô D·ª± √Ån!

```bash
‚≠êÔ∏è Star ‚Ä¢ üç¥ Fork ‚Ä¢ üêû Report Issue
```

---
```

================
File: requirements.txt
================
requests
python-dotenv
google-generativeai
tkinter
